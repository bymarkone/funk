import org.gradle.api.artifacts.maven.MavenDeployment

allprojects {
  apply plugin: "idea"
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'nexus-workflow'

  ext.sha = 'git rev-parse --short HEAD'.execute().in.text.trim()

  version = '0.2.0.' + (System.getenv("SNAP_PIPELINE_COUNTER") ?: sha)
  group = "org.javafunk.funk"

  buildscript {
    repositories {
      mavenCentral()
    }
    dependencies {
      classpath 'com.adaptc.gradle:nexus-workflow:0.6'
    }
  }

  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: "java"

  sourceCompatibility = '1.7'

  dependencies {
    testCompile "org.mockito:mockito-core:1.9.0"
    testCompile "junit:junit-dep:4.10"
  }

  def compilerOptions = {
    options.fork = true
    options.forkOptions.memoryMaximumSize = "1024M"
  }

  compileJava(compilerOptions)
  compileTestJava(compilerOptions)

  signing {
    sign configurations.archives
  }

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
  }

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
  }
}

configurations {
  compile
  archives
}

dependencies {
  compile project(":funk-core")
  compile project(":funk-matchers")
  compile project(":funk-jackson")
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.3'
}

task emptyPom {
  ext.outputFile = file("$buildDir/poms/pom-default.xml")
  doLast {
    outputFile.getParentFile().mkdirs()
    outputFile.createNewFile()
  }
}

artifacts {
  archives(file: emptyPom.outputFile) {
    name 'default'
    type 'pom'
    builtBy emptyPom
  }
}

createReleaseTag.dependsOn([":uploadArchives", subprojects.collect { it.name + ":uploadArchives"}].flatten().toSet())

uploadArchives {
  configuration = configurations.archives

  repositories {
    flatDir {
      dirs 'repos'
    }

    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(
                userName: project.property("oss-releases.username"),
                password: project.property("oss-releases.password"))
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(
                userName: project.property("oss-releases.username"),
                password: project.property("oss-releases.password"))
      }

      pom {
        project {
          name 'Funk'
          description 'Functional utilities for Java'
          artifactId 'funk'
          packaging 'pom'
          url 'http://www.javafunk.org'

          modules {
            subprojects.each {
              owner.module(it.name)
            }
          }

          scm {
            url 'scm:git:https://github.com/javafunk/funk.git'
            connection 'scm:git:https://github.com/javafunk/funk.git'
            developerConnection 'http://github.com/javafunk/funk'
          }

          licenses {
            license {
              name 'BSD License'
              url 'http://www.opensource.org/licenses/bsd-license.php'
            }
          }

          developers {
            developer {
              id 'toby'
              name 'Toby Clemson'
              email 'tobyclemson@gmail.com'
            }
            developer {
              id 'andrew'
              name 'Andrew Kiellor'
              email 'akiellor@gmail.com'
            }
            developer {
              id 'simon'
              name 'Simon Brunning'
              email 'simon@brunningonline.net'
            }
          }
        }
      }

      pom.whenConfigured { pom ->
        pom.project {
          dependencies {
            rootProject.configurations.compile.dependencies.all { dep ->
              owner.dependency {
                artifactId dep.name
                groupId dep.group
                version dep.version
                scope 'compile'
              }
            }
          }
        }
      }
    }
  }
}

idea {
  project {
    ipr {
      withXml {
        def ideaProject = it.asNode()

        // Automatically set up Git support
        ideaProject.append(node().component(name: 'VcsDirectoryMappings') {
          mapping(directory: '$PROJECT_DIR$', vcs: 'Git')
        })

        // Turn on annotation processing
        ideaProject.component.find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0].replaceNode {
          annotationProcessing {
            profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
          }
        }
      }
    }
  }
}

def addAsParentFor(MavenPom pom) {
  pom.project {
    parent {
      artifactId 'funk'
      groupId rootProject.group
      version rootProject.version
      relativePath '../../../build/poms/pom-default.xml'
    }
  }
}
